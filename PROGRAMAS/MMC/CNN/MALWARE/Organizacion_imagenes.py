"""
Created on Thu Feb  1 18:02:41 2024

@author: pjime
"""

import csv
import os                                              
import pickle
import cv2

from multiprocessing import Pool
from time import perf_counter
from load_hijos import load_preprocess_data
   

def concat(xss):
    xs = []
    for i in xss:
        xs += i
    return xs


def first(par):
    return par[0]


def second(par):
    return par[1]


def verificar_extension(archivo):
    
    if archivo.endswith(".bytes"):
        return True
    else: 
        return False   


def leer_csv(name):

    diccionario = {}
    
    with open(name, newline='') as csvfile:
        contenido = csv.DictReader(csvfile)
        for fila in contenido:
            
            id_valor = fila['Id']  
            label_valor = fila['Class']

            diccionario[id_valor] = label_valor
            
    return diccionario

def filtrar_resultados(resultados):
    
    datos  = list(map(first,resultados))
    etiquetas = list(map(second,resultados))
        
    data = []
    label = []
    
    for i in range(len(datos)):
        
        if len(datos[i]) > 0:
            
            data.append(datos[i])
            label.append(etiquetas[i])
            
    return (data,label)


def load_preprocess_data_paralelo(nr_procesos, interpolation = cv2.INTER_LINEAR, load_type = 3):
        
    ruta = os.path.join('train')
    imLista = os.listdir(ruta)
    imTotal = list(filter(verificar_extension, imLista))
    
    trainLabel = leer_csv('trainLabels.csv')
    
    p = Pool(nr_procesos)
    args = [(ruta,trainLabel,k, interpolation, load_type) for k in imTotal]
    resultados = p.starmap(load_preprocess_data, args)
    
    data,label = filtrar_resultados(resultados)
    
    return (data, label)


if __name__ == "__main__":
        
    nombres = ['arriba', 'random_crop', 'linear', 'cubic', 'near']
    variables = [0]*5
    interpolacion = [0,0,cv2.INTER_LINEAR, cv2.INTER_CUBIC, cv2.INTER_NEAREST]
    tipos = [1,2,3,3,3]

    for i in range(len(variables)):
        
        t1 = perf_counter()
    
        inter = interpolacion[i]
        tipo = tipos[i]      
        variables[i] = load_preprocess_data_paralelo(6, inter, tipo)
        
        with open(nombres[i]+'.pkl', 'wb') as f:
            pickle.dump(variables[i], f)
            
        t2 = perf_counter()
        print(t2-t1)

