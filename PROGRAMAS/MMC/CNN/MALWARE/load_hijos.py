

import numpy as np
import matplotlib.pyplot as plt
import os                                              
import cv2

from metodos import metodo1, metodo2, metodo3


from PIL import Image
import csv


def visualize_image(image_matrix):
    plt.imshow(image_matrix)
    plt.axis('off')
    plt.show() 

    

def bytes_to_image(im_Array, width, height, interpolation, tipo):
    
    if tipo == 1:
        imagen = metodo1(width, height, im_Array)
        
    elif tipo == 2:
        imagen = metodo2(width, height, im_Array)
        
    else:
        imagen = metodo3(width, height, im_Array, interpolation)

    result = np.stack([imagen] * 3, axis=-1)
    
    return result


def file_to_image(name, interpolation, tipo):

    path = os.path.join('train')
    filePath = os.path.join(path,name)
    
    with open(filePath, 'rb') as f :
        contenido = f.read()
        decimal_list = []
        for byte in contenido:
            decimal_list.append(byte)
    
    im_Array = np.array(decimal_list)
    
    width = 224
    height = 224
    malware_image = bytes_to_image(im_Array, width, height, interpolation, tipo)

    visualize_image(malware_image)
    
    return malware_image


def load_preprocess_data(ruta, trainLabel, image, interpolation = cv2.INTER_LINEAR, tipo = 3):

    data = []                                         
    labels = []                                               
    
    imagen = file_to_image(image, interpolation, tipo)
    
    if imagen.size == 0:
        pass
    
    else:
        data.append(imagen)
        Id = image.rstrip('.bytes')
        label = trainLabel[Id]
        labels.append(label) 
        
    return (data, labels)


'''
def leer_csv(name):

    diccionario = {}
    
    with open(name, newline='') as csvfile:
        contenido = csv.DictReader(csvfile)
        for fila in contenido:
            
            id_valor = fila['Id']  
            label_valor = fila['Class']

            diccionario[id_valor] = label_valor
            
    return diccionario

def procesar_archivos():
    path = os.path.join('train')
    file_list = os.listdir(path)

    # Filtrar los archivos que terminan en ".bytes"
    lista_archivos = [file for file in file_list if file.endswith(".bytes")]
    diccionario = leer_csv('trainLabels.csv')
    for contador, archivo in enumerate(lista_archivos, start=1):
        if archivo[:-6] in diccionario:
            imagen_resultante = file_to_image(archivo, 1,3)
            nombre_guardado = f"{diccionario[archivo[:-6]]}+{contador}.png"
            imagen_array = np.squeeze(imagen_resultante)
            imagen_pil = Image.fromarray(imagen_array)
            # Guardar la imagen usando el m√©todo 'save' de PIL
            imagen_pil.save(nombre_guardado)
            print(imagen_resultante.shape[2], flush=True)
'''