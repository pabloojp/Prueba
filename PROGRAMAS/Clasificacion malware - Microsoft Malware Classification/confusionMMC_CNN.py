"""
Nombre del codigo: Generar la matriz de confusión del autoencoder convolucional
Base de datos: Microsoft Malware Dataset
Alumno: Jiménez Poyatos, Pablo
"""

import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

from sklearn.metrics import confusion_matrix
from keras.models import load_model


def confusion_matrix_pablo(nombre: str, X_test: np.ndarray, y_test: np.ndarray, guardar: str) -> None:
    """Genera y guarda la matriz de confusión y su versión normalizada de un modelo autoencoder convolucional.

    Args:
        nombre (str): Nombre del archivo del modelo a cargar.
        X_test (np.ndarray): Datos de prueba.
        y_test (np.ndarray): Etiquetas verdaderas de los datos de prueba.
        guardar (str): Nombre base del archivo donde se guardarán las imágenes de las matrices de confusión.
    """

    # Carga el modelo desde el archivo
    model = load_model(nombre)

    # Obtén las predicciones para todas las imágenes en X_test
    y_pred = model.predict(X_test)

    # Convierte las predicciones a clases
    y_pred_classes = np.argmax(y_pred, axis=-1)

    # Convierte las etiquetas verdaderas a clases si están en one-hot encoding
    y_true_classes = np.argmax(y_test, axis=-1)

    # Genera la matriz de confusión
    conf_matrix = confusion_matrix(y_true_classes, y_pred_classes)


    # Crear y guardar el heatmap de la matriz de confusión
    plt.figure(figsize=(10, 8))
    sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=np.arange(1, 10), yticklabels=np.arange(1, 10))
    plt.xlabel('Predicted label')
    plt.ylabel('True label')
    plt.title('Confusion Matrix')
    plt.savefig(guardar + '.png')
    plt.show()

    conf_matrix_norm = confusion_matrix(y_true_classes, y_pred_classes, normalize='true')



    # Crear y guardar el heatmap de la matriz de confusión
    plt.figure(figsize=(10, 8))
    sns.heatmap(conf_matrix_norm, annot=True, fmt='.2f', cmap='Blues', xticklabels=np.arange(1, 10), yticklabels=np.arange(1, 10))
    plt.xlabel('Predicted label')
    plt.ylabel('True label')
    plt.title('Confusion Matrix')
    plt.savefig(guardar + 'Norm1.png')
    plt.show()